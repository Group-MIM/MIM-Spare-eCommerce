{"version":3,"file":"ngx-paypal.js.map","sources":["ng://ngx-paypal/lib/models/paypal-models.ts","ng://ngx-paypal/lib/services/script.service.ts","ng://ngx-paypal/lib/components/paypal.component.ts","ng://ngx-paypal/lib/ngx-paypal.module.ts"],"sourcesContent":["\r\nexport class PayPalConfig {\r\n\r\n    /**\r\n     * Currency - Defaults to USD if not provided\r\n     */\r\n    public currency?: string;\r\n\r\n    /**\r\n    * Order to be created\r\n    */\r\n    public createOrder!: (data: any) => ICreateOrderRequest;\r\n\r\n    /**\r\n     * Advanced configuration\r\n     */\r\n    public advanced?: IAdvancedConfiguration;\r\n\r\n    /**\r\n     * Client id\r\n     */\r\n    public clientId!: string;\r\n\r\n    /**\r\n     * Called when 'onApprove' event occurs\r\n     */\r\n    public onApprove!: (data: IOnApproveCallbackData, actions: any) => void;\r\n\r\n    /**\r\n    * Called when authorization on client succeeds\r\n    */\r\n    public onClientAuthorization?: (authorization: IClientAuthorizeCallbackData) => void;\r\n\r\n    /**\r\n     * Implement for authorizing on server side\r\n     */\r\n    public authorizeOnServer?: (data: IOnApproveCallbackData, actions: any) => void;\r\n\r\n    /**\r\n     * Button style configuration\r\n     */\r\n    public style?: IPayPalButtonStyle;\r\n\r\n    /**\r\n     * Error handler\r\n     */\r\n    public onError?: (err: any) => void;\r\n\r\n    /**\r\n     * Click handler\r\n     */\r\n    public onClick?: () => void;\r\n\r\n    /**\r\n     * Cancel handler\r\n     */\r\n    onCancel?: (data: ICancelCallbackData, actions: any) => void;\r\n\r\n    constructor(\r\n        config: {\r\n            clientId: string,\r\n            onApprove: (data: IOnApproveCallbackData, actions: IOnApproveCallbackActions) => void,\r\n            createOrder: (data: any) => ICreateOrderRequest,\r\n\r\n            onClientAuthorization?: (authorization: IClientAuthorizeCallbackData) => void,\r\n            advanced?: IAdvancedConfiguration,\r\n            authorizeOnServer?: (data: IOnApproveCallbackData, actions: any) => void,\r\n            currency?: string;\r\n            onError?: (err: any) => void,\r\n            onClick?: () => void,\r\n            onCancel?: (data: ICancelCallbackData, actions: any) => void,\r\n            style?: IPayPalButtonStyle,\r\n        }) {\r\n        Object.assign(this, config);\r\n    }\r\n}\r\n\r\nexport interface IClientAuthorizeCallbackData extends IOrderDetails {\r\n    links: ILinkDescription[];\r\n}\r\n\r\nexport interface IOrderDetails {\r\n    create_time: string;\r\n    update_time: string;\r\n    id: string;\r\n    intent: OrderIntent;\r\n    payer: IPayer;\r\n    status: OrderStatus;\r\n    links: ILinkDescription[];\r\n}\r\n\r\nexport interface ILinkDescription {\r\n    href: string;\r\n    rel: String;\r\n    method?: LinkMethod;\r\n}\r\n\r\nexport interface IQueryParam {\r\n    name: string;\r\n    value: string;\r\n}\r\n\r\nexport type LinkMethod = 'GET' | 'POST' | 'PUT' | 'DELETE' | 'HEAD' | 'CONNECT' | 'OPTIONS' | 'PATCH';\r\n\r\nexport interface IAdvancedConfiguration {\r\n    updateOrderDetails?: {\r\n        commit?: boolean\r\n    };\r\n    extraQueryParams?: IQueryParam[];\r\n}\r\n\r\nexport interface IOnApproveCallbackData {\r\n    orderID: string;\r\n    payerID: string;\r\n}\r\n\r\nexport interface ICreateOrderCallbackActions {\r\n    order: {\r\n        create: (order: ICreateOrderRequest) => Promise<any>;\r\n    };\r\n}\r\n\r\nexport interface ICancelCallbackData {\r\n    orderID: string;\r\n}\r\n\r\nexport interface IOnApproveCallbackActions {\r\n    redirect: () => void;\r\n    restart: () => void;\r\n    order: {\r\n        authorize: () => Promise<any>;\r\n        capture: () => Promise<any>;\r\n        get: () => Promise<IOrderDetails>;\r\n        patch: () => Promise<any>;\r\n    };\r\n}\r\n\r\nexport interface IPayPalButtonStyle {\r\n    label?: 'paypal' | 'checkout' | 'pay' | 'installment';\r\n    size?: 'small' | 'medium' | 'large' | 'responsive';\r\n    shape?: 'pill' | 'rect';\r\n    color?: 'gold' | 'blue' | 'silver';\r\n    layout?: 'horizontal' | 'vertical';\r\n    tagline?: boolean;\r\n}\r\n\r\nexport interface ICreateOrderRequest {\r\n    intent: OrderIntent;\r\n    purchase_units: IPurchaseUnit[];\r\n\r\n    payer?: IPayer;\r\n    application_context?: IApplicationContext;\r\n\r\n}\r\nexport interface IPayer {\r\n    name?: IPartyName;\r\n    email_address?: string;\r\n    payer_id?: string;\r\n    birth_date?: string;\r\n    tax_info?: ITaxInfo;\r\n    address?: IAddressPortable;\r\n}\r\n\r\nexport interface IApplicationContext {\r\n    brand_name?: string;\r\n    locale?: string;\r\n    landing_page?: PaypalLandingPage;\r\n    shipping_preference?: ShippingPreference;\r\n    user_action?: PayPalUserAction;\r\n    payment_method?: IPaymentMethod;\r\n    return_url?: string;\r\n    cancel_url?: string;\r\n}\r\n\r\nexport interface IPaymentMethod {\r\n    payer_selected?: PayerSelected;\r\n    payee_preferred?: PayeePreferred;\r\n}\r\n\r\nexport type PayeePreferred = 'UNRESTRICTED' | 'IMMEDIATE_PAYMENT_REQUIRED';\r\n\r\nexport type PayerSelected = 'PAYPAL_CREDIT' | 'PAYPAL';\r\n\r\nexport type PayPalUserAction = 'CONTINUE' | 'PAY_NOW';\r\n\r\nexport type ShippingPreference = 'GET_FROM_FILE' | 'NO_SHIPPING' | 'SET_PROVIDED_ADDRESS';\r\n\r\nexport type PaypalLandingPage = 'LOGIN' | 'BILLING';\r\n\r\nexport type OrderIntent = 'CAPTURE' | 'AUTHORIZE';\r\n\r\nexport type DisbursementMode = 'INSTANT' | 'DELAYED';\r\n\r\nexport type ItemCategory = 'DIGITAL_GOODS' | 'PHYSICAL_GOODS';\r\n\r\nexport type PhoneType = 'FAX' | 'HOME' | 'MOBILE' | 'OTHER' | 'PAGER';\r\n\r\nexport type TaxIdType = 'BR_CPF' | 'BR_CNPJ';\r\n\r\nexport interface IPhone {\r\n    phone_type?: PhoneType;\r\n    phone_number?: IPhoneNumber;\r\n}\r\n\r\nexport interface ITaxInfo {\r\n    tax_id: string;\r\n    tax_id_type: TaxIdType;\r\n}\r\n\r\nexport interface IPhoneNumber {\r\n    national_number: string;\r\n}\r\n\r\nexport interface IPurchaseUnit {\r\n    amount: IUnitAmount;\r\n\r\n    reference_id?: string;\r\n    payee?: IPayee;\r\n    payment_instruction?: IPaymentInstructions;\r\n    description?: string;\r\n    custom_id?: string;\r\n    invoice_id?: string;\r\n    soft_descriptor?: string;\r\n    items: ITransactionItem[];\r\n    shipping?: IShipping;\r\n}\r\n\r\nexport interface IPayee {\r\n    email_address?: string;\r\n    merchant_id?: string;\r\n}\r\n\r\nexport interface IPaymentInstructions {\r\n    platform_fees?: IPlatformFee[];\r\n    disbursement_mode?: DisbursementMode;\r\n}\r\n\r\nexport interface IPlatformFee {\r\n    amount: IUnitAmount;\r\n    payee?: IPayee;\r\n}\r\n\r\nexport interface ITransactionItem {\r\n    name: string;\r\n    unit_amount: IUnitAmount;\r\n    quantity: string;\r\n\r\n    description?: string;\r\n    sku?: string;\r\n    category?: ItemCategory;\r\n    tax?: ITax;\r\n}\r\n\r\nexport interface ITax {\r\n    currency_code: string;\r\n    value: string;\r\n}\r\n\r\nexport interface IUnitAmount {\r\n    currency_code: string;\r\n    value: string;\r\n    breakdown?: IUnitBreakdown;\r\n}\r\n\r\nexport interface IUnitBreakdown {\r\n    item_total?: IUnitAmount;\r\n    shipping?: IUnitAmount;\r\n    handling?: IUnitAmount;\r\n    tax_total?: IUnitAmount;\r\n    insurance?: IUnitAmount;\r\n    shipping_discount?: IUnitAmount;\r\n}\r\n\r\nexport interface IPartyName {\r\n    prefix?: string;\r\n    given_name?: string;\r\n    surname?: string;\r\n    middle_name?: string;\r\n    suffix?: string;\r\n    alternate_full_name?: string;\r\n    full_name?: string;\r\n}\r\n\r\nexport interface IAddressPortable {\r\n    country_code: string;\r\n\r\n    address_line_1?: string;\r\n    address_line_2?: string;\r\n    admin_area_2?: string;\r\n    admin_area_1?: string;\r\n    postal_code?: string;\r\n}\r\n\r\nexport interface IShipping {\r\n    name?: IPartyName;\r\n    address?: IAddressPortable;\r\n}\r\n\r\nexport type OrderStatus = 'APPROVED' | 'SAVED' | 'CREATED' | 'VOIDED' | 'COMPLETED';\r\n\r\n\r\n","import { Injectable, NgZone } from '@angular/core';\r\n\r\n@Injectable()\r\nexport class ScriptService {\r\n\r\n    constructor(\r\n        protected zone: NgZone,\r\n    ) {\r\n    }\r\n\r\n    registerScript(url: string, globalVar: string, onReady: (globalVar: any) => void): void {\r\n        if ((window as any)[globalVar]) {\r\n            // global variable is present = script was already loaded\r\n            this.zone.run(() => {\r\n                onReady((window as any)[globalVar]);\r\n            });\r\n            return;\r\n        }\r\n\r\n        // prepare script elem\r\n        const scriptElem = document.createElement('script');\r\n        scriptElem.id = this.getElemId(globalVar);\r\n        scriptElem.innerHTML = '';\r\n        scriptElem.onload = () => {\r\n            this.zone.run(() => {\r\n                onReady((window as any)[globalVar]);\r\n            });\r\n        };\r\n        scriptElem.src = url;\r\n        scriptElem.async = true;\r\n        scriptElem.defer = true;\r\n\r\n        // add script to header\r\n        document.getElementsByTagName('head')[0].appendChild(scriptElem);\r\n    }\r\n\r\n    cleanup(url: string, globalVar: string): void {\r\n        (window as any)[globalVar] = undefined;\r\n        (window as any)[url] = undefined;\r\n\r\n        // remove script from DOM\r\n        const elem = document.getElementById(this.getElemId(globalVar));\r\n\r\n        if (elem) {\r\n            document.removeChild(elem);\r\n        }\r\n    }\r\n\r\n    private getElemId(globalVar: string): string {\r\n        return `ngx-paypal-script-elem-${globalVar}`;\r\n    }\r\n}\r\n","import {\r\n    AfterViewInit,\r\n    ChangeDetectionStrategy,\r\n    Component,\r\n    ElementRef,\r\n    Input,\r\n    OnChanges,\r\n    OnDestroy,\r\n    SimpleChanges,\r\n    ViewChild,\r\n} from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\n\r\nimport {\r\n    ICancelCallbackData,\r\n    IClientAuthorizeCallbackData,\r\n    ICreateOrderCallbackActions,\r\n    IOnApproveCallbackActions,\r\n    IOnApproveCallbackData,\r\n    IQueryParam,\r\n    PayPalConfig,\r\n} from '../models/paypal-models';\r\nimport { ScriptService } from '../services/script.service';\r\n\r\n@Component({\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    selector: 'ngx-paypal',\r\n    template: `\r\n    <div #payPalButtonContainer [id]=\"payPalButtonContainerId\"></div>\r\n    `\r\n})\r\nexport class NgxPaypalComponent implements OnChanges, OnDestroy, AfterViewInit {\r\n\r\n    /**\r\n     * Configuration for paypal.\r\n     */\r\n    @Input() config?: PayPalConfig;\r\n\r\n    /**\r\n    * Name of the global variable where paypal is stored\r\n    */\r\n    private readonly paypalWindowName = 'paypal';\r\n\r\n    /**\r\n     * Id of the element where PayPal button will be rendered\r\n     */\r\n    public payPalButtonContainerId?: string;\r\n\r\n    private readonly ngUnsubscribe: Subject<void> = new Subject<void>();\r\n\r\n    private payPalButtonContainerElem?: ElementRef;\r\n    @ViewChild('payPalButtonContainer') set payPalButtonContainer(content: ElementRef) {\r\n        this.payPalButtonContainerElem = content;\r\n    }\r\n\r\n    /**\r\n     * Flag that indicates if paypal should be initialized (required for handling script load events and availability of DOM element)\r\n     */\r\n    private initializePayPal: boolean = true;\r\n\r\n    /**\r\n     * Reference to PayPal global API\r\n     */\r\n    private payPal: any;\r\n\r\n    constructor(\r\n        private scriptService: ScriptService,\r\n    ) {\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        if (!this.payPalButtonContainerId) {\r\n            this.payPalButtonContainerId = this.generateElementId();\r\n        }\r\n\r\n        // init when config once its available\r\n        const config = this.config;\r\n        if (config) {\r\n            this.initPayPalScript(config, (payPal) => {\r\n                // store reference to paypal global script\r\n                this.payPal = payPal;\r\n                this.doPayPalCheck();\r\n            });\r\n        }\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.ngUnsubscribe.next();\r\n        this.ngUnsubscribe.complete();\r\n    }\r\n\r\n    ngAfterViewInit(): void {\r\n        this.doPayPalCheck();\r\n    }\r\n\r\n    private doPayPalCheck(): void {\r\n        if (this.initializePayPal && this.config && this.payPal && this.payPalButtonContainerElem) {\r\n            // make sure that id is also set\r\n            if (this.payPalButtonContainerElem.nativeElement.id) {\r\n                this.initializePayPal = false;\r\n                this.initPayPal(this.config, this.payPal);\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    private getPayPalSdkUrl(config: PayPalConfig): string {\r\n        const params: IQueryParam[] = [\r\n            {\r\n                name: 'client-id',\r\n                value: config.clientId\r\n            }\r\n        ];\r\n\r\n        if (config.currency) {\r\n            params.push({\r\n                name: 'currency',\r\n                value: config.currency\r\n            });\r\n        }\r\n\r\n        if (config.advanced && config.advanced.updateOrderDetails) {\r\n            params.push({\r\n                name: 'commit',\r\n                value: config.advanced.updateOrderDetails.commit ? 'true' : 'false'\r\n            });\r\n        }\r\n\r\n        // add extra query params\r\n        if (config.advanced && config.advanced.extraQueryParams) {\r\n            params.push(...config.advanced.extraQueryParams);\r\n        }\r\n\r\n        return `https://www.paypal.com/sdk/js${this.getQueryString(params)}`;\r\n    }\r\n\r\n    private initPayPalScript(config: PayPalConfig, initPayPal: (paypal: any) => void): void {\r\n        this.scriptService.registerScript(this.getPayPalSdkUrl(config), this.paypalWindowName, (paypal) => {\r\n            initPayPal(paypal);\r\n        });\r\n    }\r\n\r\n    private getQueryString(queryParams: IQueryParam[]): string {\r\n        let queryString = '';\r\n\r\n        for (let i = 0; i < queryParams.length; i++) {\r\n            const queryParam = queryParams[i];\r\n            if (i === 0) {\r\n                queryString += '?';\r\n            } else {\r\n                queryString += '&';\r\n            }\r\n\r\n            queryString += `${queryParam.name}=${queryParam.value}`;\r\n        }\r\n\r\n        return queryString;\r\n    }\r\n\r\n    private generateElementId(): string {\r\n        return `ngx-captcha-id-${new Date().valueOf()}`;\r\n    }\r\n\r\n    private initPayPal(config: PayPalConfig, paypal: any): void {\r\n        // https://developer.paypal.com/docs/checkout/integrate/#2-add-the-paypal-script-to-your-web-page\r\n        paypal.Buttons({\r\n            style: config.style,\r\n\r\n            createOrder: (data: any, actions: ICreateOrderCallbackActions) => {\r\n                return actions.order.create(config.createOrder(data));\r\n            },\r\n\r\n            onApprove: (data: IOnApproveCallbackData, actions: IOnApproveCallbackActions) => {\r\n                if (config.onApprove) {\r\n                    config.onApprove(data, actions);\r\n                }\r\n\r\n                // capture on server\r\n                if (config.authorizeOnServer) {\r\n                    config.authorizeOnServer(data, actions);\r\n                    return;\r\n                }\r\n\r\n                // capture on client\r\n                const onClientAuthorization = config.onClientAuthorization;\r\n                if (onClientAuthorization) {\r\n                    actions.order.capture().then((details: IClientAuthorizeCallbackData) => {\r\n                        onClientAuthorization(details);\r\n                    });\r\n                    return;\r\n                }\r\n            },\r\n\r\n            onError: (error: any) => {\r\n                if (config.onError) {\r\n                    config.onError(error);\r\n                }\r\n            },\r\n\r\n            onCancel: (data: ICancelCallbackData, actions: any) => {\r\n                if (config.onCancel) {\r\n                    config.onCancel(data, actions);\r\n                }\r\n            },\r\n            onClick: () => {\r\n                if (config.onClick) {\r\n                    config.onClick();\r\n                }\r\n            },\r\n        }).render(`#${this.payPalButtonContainerId}`);\r\n    }\r\n}\r\n\r\n\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { NgxPaypalComponent } from './components/paypal.component';\r\nimport { ScriptService } from './services/script.service';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  declarations: [\r\n    NgxPaypalComponent,\r\n  ],\r\n  exports: [\r\n    NgxPaypalComponent,\r\n  ],\r\n  providers: [\r\n    ScriptService\r\n  ]\r\n})\r\nexport class NgxPayPalModule {\r\n}\r\n\r\n\r\n"],"names":[],"mappings":"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"}
