(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('rxjs'), require('@angular/core')) :
    typeof define === 'function' && define.amd ? define('ngx-paypal', ['exports', '@angular/common', 'rxjs', '@angular/core'], factory) :
    (factory((global['ngx-paypal'] = {}),global.ng.common,global.rxjs,global.ng.core));
}(this, (function (exports,common,rxjs,core) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ScriptService = /** @class */ (function () {
        function ScriptService(zone) {
            this.zone = zone;
        }
        /**
         * @param {?} url
         * @param {?} globalVar
         * @param {?} onReady
         * @return {?}
         */
        ScriptService.prototype.registerScript = /**
         * @param {?} url
         * @param {?} globalVar
         * @param {?} onReady
         * @return {?}
         */
            function (url, globalVar, onReady) {
                var _this = this;
                if ((( /** @type {?} */(window)))[globalVar]) {
                    // global variable is present = script was already loaded
                    this.zone.run(( /**
                     * @return {?}
                     */function () {
                        onReady((( /** @type {?} */(window)))[globalVar]);
                    }));
                    return;
                }
                // prepare script elem
                /** @type {?} */
                var scriptElem = document.createElement('script');
                scriptElem.id = this.getElemId(globalVar);
                scriptElem.innerHTML = '';
                scriptElem.onload = ( /**
                 * @return {?}
                 */function () {
                    _this.zone.run(( /**
                     * @return {?}
                     */function () {
                        onReady((( /** @type {?} */(window)))[globalVar]);
                    }));
                });
                scriptElem.src = url;
                scriptElem.async = true;
                scriptElem.defer = true;
                // add script to header
                document.getElementsByTagName('head')[0].appendChild(scriptElem);
            };
        /**
         * @param {?} url
         * @param {?} globalVar
         * @return {?}
         */
        ScriptService.prototype.cleanup = /**
         * @param {?} url
         * @param {?} globalVar
         * @return {?}
         */
            function (url, globalVar) {
                (( /** @type {?} */(window)))[globalVar] = undefined;
                (( /** @type {?} */(window)))[url] = undefined;
                // remove script from DOM
                /** @type {?} */
                var elem = document.getElementById(this.getElemId(globalVar));
                if (elem) {
                    document.removeChild(elem);
                }
            };
        /**
         * @private
         * @param {?} globalVar
         * @return {?}
         */
        ScriptService.prototype.getElemId = /**
         * @private
         * @param {?} globalVar
         * @return {?}
         */
            function (globalVar) {
                return "ngx-paypal-script-elem-" + globalVar;
            };
        ScriptService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        ScriptService.ctorParameters = function () {
            return [
                { type: core.NgZone }
            ];
        };
        return ScriptService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgxPaypalComponent = /** @class */ (function () {
        function NgxPaypalComponent(scriptService) {
            this.scriptService = scriptService;
            /**
             * Name of the global variable where paypal is stored
             */
            this.paypalWindowName = 'paypal';
            this.ngUnsubscribe = new rxjs.Subject();
            /**
             * Flag that indicates if paypal should be initialized (required for handling script load events and availability of DOM element)
             */
            this.initializePayPal = true;
        }
        Object.defineProperty(NgxPaypalComponent.prototype, "payPalButtonContainer", {
            set: /**
             * @param {?} content
             * @return {?}
             */ function (content) {
                this.payPalButtonContainerElem = content;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} changes
         * @return {?}
         */
        NgxPaypalComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                var _this = this;
                if (!this.payPalButtonContainerId) {
                    this.payPalButtonContainerId = this.generateElementId();
                }
                // init when config once its available
                /** @type {?} */
                var config = this.config;
                if (config) {
                    this.initPayPalScript(config, ( /**
                     * @param {?} payPal
                     * @return {?}
                     */function (payPal) {
                        // store reference to paypal global script
                        _this.payPal = payPal;
                        _this.doPayPalCheck();
                    }));
                }
            };
        /**
         * @return {?}
         */
        NgxPaypalComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.ngUnsubscribe.next();
                this.ngUnsubscribe.complete();
            };
        /**
         * @return {?}
         */
        NgxPaypalComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                this.doPayPalCheck();
            };
        /**
         * @private
         * @return {?}
         */
        NgxPaypalComponent.prototype.doPayPalCheck = /**
         * @private
         * @return {?}
         */
            function () {
                if (this.initializePayPal && this.config && this.payPal && this.payPalButtonContainerElem) {
                    // make sure that id is also set
                    if (this.payPalButtonContainerElem.nativeElement.id) {
                        this.initializePayPal = false;
                        this.initPayPal(this.config, this.payPal);
                    }
                }
            };
        /**
         * @private
         * @param {?} config
         * @return {?}
         */
        NgxPaypalComponent.prototype.getPayPalSdkUrl = /**
         * @private
         * @param {?} config
         * @return {?}
         */
            function (config) {
                /** @type {?} */
                var params = [
                    {
                        name: 'client-id',
                        value: config.clientId
                    }
                ];
                if (config.currency) {
                    params.push({
                        name: 'currency',
                        value: config.currency
                    });
                }
                if (config.advanced && config.advanced.updateOrderDetails) {
                    params.push({
                        name: 'commit',
                        value: config.advanced.updateOrderDetails.commit ? 'true' : 'false'
                    });
                }
                // add extra query params
                if (config.advanced && config.advanced.extraQueryParams) {
                    params.push.apply(params, __spread(config.advanced.extraQueryParams));
                }
                return "https://www.paypal.com/sdk/js" + this.getQueryString(params);
            };
        /**
         * @private
         * @param {?} config
         * @param {?} initPayPal
         * @return {?}
         */
        NgxPaypalComponent.prototype.initPayPalScript = /**
         * @private
         * @param {?} config
         * @param {?} initPayPal
         * @return {?}
         */
            function (config, initPayPal) {
                this.scriptService.registerScript(this.getPayPalSdkUrl(config), this.paypalWindowName, ( /**
                 * @param {?} paypal
                 * @return {?}
                 */function (paypal) {
                    initPayPal(paypal);
                }));
            };
        /**
         * @private
         * @param {?} queryParams
         * @return {?}
         */
        NgxPaypalComponent.prototype.getQueryString = /**
         * @private
         * @param {?} queryParams
         * @return {?}
         */
            function (queryParams) {
                /** @type {?} */
                var queryString = '';
                for (var i = 0; i < queryParams.length; i++) {
                    /** @type {?} */
                    var queryParam = queryParams[i];
                    if (i === 0) {
                        queryString += '?';
                    }
                    else {
                        queryString += '&';
                    }
                    queryString += queryParam.name + "=" + queryParam.value;
                }
                return queryString;
            };
        /**
         * @private
         * @return {?}
         */
        NgxPaypalComponent.prototype.generateElementId = /**
         * @private
         * @return {?}
         */
            function () {
                return "ngx-captcha-id-" + new Date().valueOf();
            };
        /**
         * @private
         * @param {?} config
         * @param {?} paypal
         * @return {?}
         */
        NgxPaypalComponent.prototype.initPayPal = /**
         * @private
         * @param {?} config
         * @param {?} paypal
         * @return {?}
         */
            function (config, paypal) {
                // https://developer.paypal.com/docs/checkout/integrate/#2-add-the-paypal-script-to-your-web-page
                paypal.Buttons({
                    style: config.style,
                    createOrder: ( /**
                     * @param {?} data
                     * @param {?} actions
                     * @return {?}
                     */function (data, actions) {
                        return actions.order.create(config.createOrder(data));
                    }),
                    onApprove: ( /**
                     * @param {?} data
                     * @param {?} actions
                     * @return {?}
                     */function (data, actions) {
                        if (config.onApprove) {
                            config.onApprove(data, actions);
                        }
                        // capture on server
                        if (config.authorizeOnServer) {
                            config.authorizeOnServer(data, actions);
                            return;
                        }
                        // capture on client
                        /** @type {?} */
                        var onClientAuthorization = config.onClientAuthorization;
                        if (onClientAuthorization) {
                            actions.order.capture().then(( /**
                             * @param {?} details
                             * @return {?}
                             */function (details) {
                                onClientAuthorization(details);
                            }));
                            return;
                        }
                    }),
                    onError: ( /**
                     * @param {?} error
                     * @return {?}
                     */function (error) {
                        if (config.onError) {
                            config.onError(error);
                        }
                    }),
                    onCancel: ( /**
                     * @param {?} data
                     * @param {?} actions
                     * @return {?}
                     */function (data, actions) {
                        if (config.onCancel) {
                            config.onCancel(data, actions);
                        }
                    }),
                    onClick: ( /**
                     * @return {?}
                     */function () {
                        if (config.onClick) {
                            config.onClick();
                        }
                    }),
                }).render("#" + this.payPalButtonContainerId);
            };
        NgxPaypalComponent.decorators = [
            { type: core.Component, args: [{
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        selector: 'ngx-paypal',
                        template: "\n    <div #payPalButtonContainer [id]=\"payPalButtonContainerId\"></div>\n    "
                    }] }
        ];
        /** @nocollapse */
        NgxPaypalComponent.ctorParameters = function () {
            return [
                { type: ScriptService }
            ];
        };
        NgxPaypalComponent.propDecorators = {
            config: [{ type: core.Input }],
            payPalButtonContainer: [{ type: core.ViewChild, args: ['payPalButtonContainer',] }]
        };
        return NgxPaypalComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgxPayPalModule = /** @class */ (function () {
        function NgxPayPalModule() {
        }
        NgxPayPalModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule
                        ],
                        declarations: [
                            NgxPaypalComponent,
                        ],
                        exports: [
                            NgxPaypalComponent,
                        ],
                        providers: [
                            ScriptService
                        ]
                    },] }
        ];
        return NgxPayPalModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var PayPalConfig = /** @class */ (function () {
        function PayPalConfig(config) {
            Object.assign(this, config);
        }
        return PayPalConfig;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.NgxPayPalModule = NgxPayPalModule;
    exports.PayPalConfig = PayPalConfig;
    exports.NgxPaypalComponent = NgxPaypalComponent;
    exports.ɵa = ScriptService;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=ngx-paypal.umd.js.map