/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ChangeDetectionStrategy, Component, ElementRef, Input, ViewChild, } from '@angular/core';
import { Subject } from 'rxjs';
import { PayPalConfig, } from '../models/paypal-models';
import { ScriptService } from '../services/script.service';
var NgxPaypalComponent = /** @class */ (function () {
    function NgxPaypalComponent(scriptService) {
        this.scriptService = scriptService;
        /**
         * Name of the global variable where paypal is stored
         */
        this.paypalWindowName = 'paypal';
        this.ngUnsubscribe = new Subject();
        /**
         * Flag that indicates if paypal should be initialized (required for handling script load events and availability of DOM element)
         */
        this.initializePayPal = true;
    }
    Object.defineProperty(NgxPaypalComponent.prototype, "payPalButtonContainer", {
        set: /**
         * @param {?} content
         * @return {?}
         */
        function (content) {
            this.payPalButtonContainerElem = content;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} changes
     * @return {?}
     */
    NgxPaypalComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        var _this = this;
        if (!this.payPalButtonContainerId) {
            this.payPalButtonContainerId = this.generateElementId();
        }
        // init when config once its available
        /** @type {?} */
        var config = this.config;
        if (config) {
            this.initPayPalScript(config, (/**
             * @param {?} payPal
             * @return {?}
             */
            function (payPal) {
                // store reference to paypal global script
                _this.payPal = payPal;
                _this.doPayPalCheck();
            }));
        }
    };
    /**
     * @return {?}
     */
    NgxPaypalComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.ngUnsubscribe.next();
        this.ngUnsubscribe.complete();
    };
    /**
     * @return {?}
     */
    NgxPaypalComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.doPayPalCheck();
    };
    /**
     * @private
     * @return {?}
     */
    NgxPaypalComponent.prototype.doPayPalCheck = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.initializePayPal && this.config && this.payPal && this.payPalButtonContainerElem) {
            // make sure that id is also set
            if (this.payPalButtonContainerElem.nativeElement.id) {
                this.initializePayPal = false;
                this.initPayPal(this.config, this.payPal);
            }
        }
    };
    /**
     * @private
     * @param {?} config
     * @return {?}
     */
    NgxPaypalComponent.prototype.getPayPalSdkUrl = /**
     * @private
     * @param {?} config
     * @return {?}
     */
    function (config) {
        /** @type {?} */
        var params = [
            {
                name: 'client-id',
                value: config.clientId
            }
        ];
        if (config.currency) {
            params.push({
                name: 'currency',
                value: config.currency
            });
        }
        if (config.advanced && config.advanced.updateOrderDetails) {
            params.push({
                name: 'commit',
                value: config.advanced.updateOrderDetails.commit ? 'true' : 'false'
            });
        }
        // add extra query params
        if (config.advanced && config.advanced.extraQueryParams) {
            params.push.apply(params, tslib_1.__spread(config.advanced.extraQueryParams));
        }
        return "https://www.paypal.com/sdk/js" + this.getQueryString(params);
    };
    /**
     * @private
     * @param {?} config
     * @param {?} initPayPal
     * @return {?}
     */
    NgxPaypalComponent.prototype.initPayPalScript = /**
     * @private
     * @param {?} config
     * @param {?} initPayPal
     * @return {?}
     */
    function (config, initPayPal) {
        this.scriptService.registerScript(this.getPayPalSdkUrl(config), this.paypalWindowName, (/**
         * @param {?} paypal
         * @return {?}
         */
        function (paypal) {
            initPayPal(paypal);
        }));
    };
    /**
     * @private
     * @param {?} queryParams
     * @return {?}
     */
    NgxPaypalComponent.prototype.getQueryString = /**
     * @private
     * @param {?} queryParams
     * @return {?}
     */
    function (queryParams) {
        /** @type {?} */
        var queryString = '';
        for (var i = 0; i < queryParams.length; i++) {
            /** @type {?} */
            var queryParam = queryParams[i];
            if (i === 0) {
                queryString += '?';
            }
            else {
                queryString += '&';
            }
            queryString += queryParam.name + "=" + queryParam.value;
        }
        return queryString;
    };
    /**
     * @private
     * @return {?}
     */
    NgxPaypalComponent.prototype.generateElementId = /**
     * @private
     * @return {?}
     */
    function () {
        return "ngx-captcha-id-" + new Date().valueOf();
    };
    /**
     * @private
     * @param {?} config
     * @param {?} paypal
     * @return {?}
     */
    NgxPaypalComponent.prototype.initPayPal = /**
     * @private
     * @param {?} config
     * @param {?} paypal
     * @return {?}
     */
    function (config, paypal) {
        // https://developer.paypal.com/docs/checkout/integrate/#2-add-the-paypal-script-to-your-web-page
        paypal.Buttons({
            style: config.style,
            createOrder: (/**
             * @param {?} data
             * @param {?} actions
             * @return {?}
             */
            function (data, actions) {
                return actions.order.create(config.createOrder(data));
            }),
            onApprove: (/**
             * @param {?} data
             * @param {?} actions
             * @return {?}
             */
            function (data, actions) {
                if (config.onApprove) {
                    config.onApprove(data, actions);
                }
                // capture on server
                if (config.authorizeOnServer) {
                    config.authorizeOnServer(data, actions);
                    return;
                }
                // capture on client
                /** @type {?} */
                var onClientAuthorization = config.onClientAuthorization;
                if (onClientAuthorization) {
                    actions.order.capture().then((/**
                     * @param {?} details
                     * @return {?}
                     */
                    function (details) {
                        onClientAuthorization(details);
                    }));
                    return;
                }
            }),
            onError: (/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
                if (config.onError) {
                    config.onError(error);
                }
            }),
            onCancel: (/**
             * @param {?} data
             * @param {?} actions
             * @return {?}
             */
            function (data, actions) {
                if (config.onCancel) {
                    config.onCancel(data, actions);
                }
            }),
            onClick: (/**
             * @return {?}
             */
            function () {
                if (config.onClick) {
                    config.onClick();
                }
            }),
        }).render("#" + this.payPalButtonContainerId);
    };
    NgxPaypalComponent.decorators = [
        { type: Component, args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'ngx-paypal',
                    template: "\n    <div #payPalButtonContainer [id]=\"payPalButtonContainerId\"></div>\n    "
                }] }
    ];
    /** @nocollapse */
    NgxPaypalComponent.ctorParameters = function () { return [
        { type: ScriptService }
    ]; };
    NgxPaypalComponent.propDecorators = {
        config: [{ type: Input }],
        payPalButtonContainer: [{ type: ViewChild, args: ['payPalButtonContainer',] }]
    };
    return NgxPaypalComponent;
}());
export { NgxPaypalComponent };
if (false) {
    /**
     * Configuration for paypal.
     * @type {?}
     */
    NgxPaypalComponent.prototype.config;
    /**
     * Name of the global variable where paypal is stored
     * @type {?}
     * @private
     */
    NgxPaypalComponent.prototype.paypalWindowName;
    /**
     * Id of the element where PayPal button will be rendered
     * @type {?}
     */
    NgxPaypalComponent.prototype.payPalButtonContainerId;
    /**
     * @type {?}
     * @private
     */
    NgxPaypalComponent.prototype.ngUnsubscribe;
    /**
     * @type {?}
     * @private
     */
    NgxPaypalComponent.prototype.payPalButtonContainerElem;
    /**
     * Flag that indicates if paypal should be initialized (required for handling script load events and availability of DOM element)
     * @type {?}
     * @private
     */
    NgxPaypalComponent.prototype.initializePayPal;
    /**
     * Reference to PayPal global API
     * @type {?}
     * @private
     */
    NgxPaypalComponent.prototype.payPal;
    /**
     * @type {?}
     * @private
     */
    NgxPaypalComponent.prototype.scriptService;
}
//# sourceMappingURL=data:application/json;base64,