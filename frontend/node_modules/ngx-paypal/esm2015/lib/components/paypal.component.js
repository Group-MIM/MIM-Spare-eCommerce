/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, Component, ElementRef, Input, ViewChild, } from '@angular/core';
import { Subject } from 'rxjs';
import { PayPalConfig, } from '../models/paypal-models';
import { ScriptService } from '../services/script.service';
export class NgxPaypalComponent {
    /**
     * @param {?} scriptService
     */
    constructor(scriptService) {
        this.scriptService = scriptService;
        /**
         * Name of the global variable where paypal is stored
         */
        this.paypalWindowName = 'paypal';
        this.ngUnsubscribe = new Subject();
        /**
         * Flag that indicates if paypal should be initialized (required for handling script load events and availability of DOM element)
         */
        this.initializePayPal = true;
    }
    /**
     * @param {?} content
     * @return {?}
     */
    set payPalButtonContainer(content) {
        this.payPalButtonContainerElem = content;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (!this.payPalButtonContainerId) {
            this.payPalButtonContainerId = this.generateElementId();
        }
        // init when config once its available
        /** @type {?} */
        const config = this.config;
        if (config) {
            this.initPayPalScript(config, (/**
             * @param {?} payPal
             * @return {?}
             */
            (payPal) => {
                // store reference to paypal global script
                this.payPal = payPal;
                this.doPayPalCheck();
            }));
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.ngUnsubscribe.next();
        this.ngUnsubscribe.complete();
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.doPayPalCheck();
    }
    /**
     * @private
     * @return {?}
     */
    doPayPalCheck() {
        if (this.initializePayPal && this.config && this.payPal && this.payPalButtonContainerElem) {
            // make sure that id is also set
            if (this.payPalButtonContainerElem.nativeElement.id) {
                this.initializePayPal = false;
                this.initPayPal(this.config, this.payPal);
            }
        }
    }
    /**
     * @private
     * @param {?} config
     * @return {?}
     */
    getPayPalSdkUrl(config) {
        /** @type {?} */
        const params = [
            {
                name: 'client-id',
                value: config.clientId
            }
        ];
        if (config.currency) {
            params.push({
                name: 'currency',
                value: config.currency
            });
        }
        if (config.advanced && config.advanced.updateOrderDetails) {
            params.push({
                name: 'commit',
                value: config.advanced.updateOrderDetails.commit ? 'true' : 'false'
            });
        }
        // add extra query params
        if (config.advanced && config.advanced.extraQueryParams) {
            params.push(...config.advanced.extraQueryParams);
        }
        return `https://www.paypal.com/sdk/js${this.getQueryString(params)}`;
    }
    /**
     * @private
     * @param {?} config
     * @param {?} initPayPal
     * @return {?}
     */
    initPayPalScript(config, initPayPal) {
        this.scriptService.registerScript(this.getPayPalSdkUrl(config), this.paypalWindowName, (/**
         * @param {?} paypal
         * @return {?}
         */
        (paypal) => {
            initPayPal(paypal);
        }));
    }
    /**
     * @private
     * @param {?} queryParams
     * @return {?}
     */
    getQueryString(queryParams) {
        /** @type {?} */
        let queryString = '';
        for (let i = 0; i < queryParams.length; i++) {
            /** @type {?} */
            const queryParam = queryParams[i];
            if (i === 0) {
                queryString += '?';
            }
            else {
                queryString += '&';
            }
            queryString += `${queryParam.name}=${queryParam.value}`;
        }
        return queryString;
    }
    /**
     * @private
     * @return {?}
     */
    generateElementId() {
        return `ngx-captcha-id-${new Date().valueOf()}`;
    }
    /**
     * @private
     * @param {?} config
     * @param {?} paypal
     * @return {?}
     */
    initPayPal(config, paypal) {
        // https://developer.paypal.com/docs/checkout/integrate/#2-add-the-paypal-script-to-your-web-page
        paypal.Buttons({
            style: config.style,
            createOrder: (/**
             * @param {?} data
             * @param {?} actions
             * @return {?}
             */
            (data, actions) => {
                return actions.order.create(config.createOrder(data));
            }),
            onApprove: (/**
             * @param {?} data
             * @param {?} actions
             * @return {?}
             */
            (data, actions) => {
                if (config.onApprove) {
                    config.onApprove(data, actions);
                }
                // capture on server
                if (config.authorizeOnServer) {
                    config.authorizeOnServer(data, actions);
                    return;
                }
                // capture on client
                /** @type {?} */
                const onClientAuthorization = config.onClientAuthorization;
                if (onClientAuthorization) {
                    actions.order.capture().then((/**
                     * @param {?} details
                     * @return {?}
                     */
                    (details) => {
                        onClientAuthorization(details);
                    }));
                    return;
                }
            }),
            onError: (/**
             * @param {?} error
             * @return {?}
             */
            (error) => {
                if (config.onError) {
                    config.onError(error);
                }
            }),
            onCancel: (/**
             * @param {?} data
             * @param {?} actions
             * @return {?}
             */
            (data, actions) => {
                if (config.onCancel) {
                    config.onCancel(data, actions);
                }
            }),
            onClick: (/**
             * @return {?}
             */
            () => {
                if (config.onClick) {
                    config.onClick();
                }
            }),
        }).render(`#${this.payPalButtonContainerId}`);
    }
}
NgxPaypalComponent.decorators = [
    { type: Component, args: [{
                changeDetection: ChangeDetectionStrategy.OnPush,
                selector: 'ngx-paypal',
                template: `
    <div #payPalButtonContainer [id]="payPalButtonContainerId"></div>
    `
            }] }
];
/** @nocollapse */
NgxPaypalComponent.ctorParameters = () => [
    { type: ScriptService }
];
NgxPaypalComponent.propDecorators = {
    config: [{ type: Input }],
    payPalButtonContainer: [{ type: ViewChild, args: ['payPalButtonContainer',] }]
};
if (false) {
    /**
     * Configuration for paypal.
     * @type {?}
     */
    NgxPaypalComponent.prototype.config;
    /**
     * Name of the global variable where paypal is stored
     * @type {?}
     * @private
     */
    NgxPaypalComponent.prototype.paypalWindowName;
    /**
     * Id of the element where PayPal button will be rendered
     * @type {?}
     */
    NgxPaypalComponent.prototype.payPalButtonContainerId;
    /**
     * @type {?}
     * @private
     */
    NgxPaypalComponent.prototype.ngUnsubscribe;
    /**
     * @type {?}
     * @private
     */
    NgxPaypalComponent.prototype.payPalButtonContainerElem;
    /**
     * Flag that indicates if paypal should be initialized (required for handling script load events and availability of DOM element)
     * @type {?}
     * @private
     */
    NgxPaypalComponent.prototype.initializePayPal;
    /**
     * Reference to PayPal global API
     * @type {?}
     * @private
     */
    NgxPaypalComponent.prototype.payPal;
    /**
     * @type {?}
     * @private
     */
    NgxPaypalComponent.prototype.scriptService;
}
//# sourceMappingURL=data:application/json;base64,